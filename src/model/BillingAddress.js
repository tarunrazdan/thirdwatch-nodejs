/**
 * Thirdwatch API
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/v1/get/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ```       
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ThirdwatchApi) {
      root.ThirdwatchApi = {};
    }
    root.ThirdwatchApi.BillingAddress = factory(root.ThirdwatchApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BillingAddress model module.
   * @module model/BillingAddress
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>BillingAddress</code>.
   * The Address field type represents a physical address. The value must be a nested object with the appropriate address subfields. We extract many geolocation features from these values. An address is represented as a nested JSON object. 
   * @alias module:model/BillingAddress
   * @class
   */
  var exports = function() {
    var _this = this;











  };

  /**
   * Constructs a <code>BillingAddress</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BillingAddress} obj Optional instance to populate.
   * @return {module:model/BillingAddress} The populated <code>BillingAddress</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_name')) {
        obj['_name'] = ApiClient.convertToType(data['_name'], 'String');
      }
      if (data.hasOwnProperty('_phone')) {
        obj['_phone'] = ApiClient.convertToType(data['_phone'], 'String');
      }
      if (data.hasOwnProperty('_address1')) {
        obj['_address1'] = ApiClient.convertToType(data['_address1'], 'String');
      }
      if (data.hasOwnProperty('_address2')) {
        obj['_address2'] = ApiClient.convertToType(data['_address2'], 'String');
      }
      if (data.hasOwnProperty('_city')) {
        obj['_city'] = ApiClient.convertToType(data['_city'], 'String');
      }
      if (data.hasOwnProperty('_region')) {
        obj['_region'] = ApiClient.convertToType(data['_region'], 'String');
      }
      if (data.hasOwnProperty('_country')) {
        obj['_country'] = ApiClient.convertToType(data['_country'], 'String');
      }
      if (data.hasOwnProperty('_zipcode')) {
        obj['_zipcode'] = ApiClient.convertToType(data['_zipcode'], 'String');
      }
      if (data.hasOwnProperty('_isOfficeAddress')) {
        obj['_isOfficeAddress'] = ApiClient.convertToType(data['_isOfficeAddress'], 'Boolean');
      }
      if (data.hasOwnProperty('_isHomeAddress')) {
        obj['_isHomeAddress'] = ApiClient.convertToType(data['_isHomeAddress'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Provide the full name associated with the address here. Concatenate first name and last name together if you collect them separately in your system.
   * @member {String} _name
   */
  exports.prototype['_name'] = undefined;
  /**
   * The phone number associated with this address. Provide the phone number as a string starting with the country code. Use E.164 format or send in the standard national format of number's origin.
   * @member {String} _phone
   */
  exports.prototype['_phone'] = undefined;
  /**
   * Address first line, e.g., \"C802 Nirvana Courtyard\".
   * @member {String} _address1
   */
  exports.prototype['_address1'] = undefined;
  /**
   * Address second line, e.g., \"Nirvana Country, Sector 50\".
   * @member {String} _address2
   */
  exports.prototype['_address2'] = undefined;
  /**
   * The city or town name, e.g., \"Gurgaon\" .
   * @member {String} _city
   */
  exports.prototype['_city'] = undefined;
  /**
   * The region portion of the address. In the India, this corresponds to the state.
   * @member {String} _region
   */
  exports.prototype['_region'] = undefined;
  /**
   * The [ISO-3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for the billing address, e.g., \"IN\" in case of India.
   * @member {String} _country
   */
  exports.prototype['_country'] = undefined;
  /**
   * The postal code associated with the address, e.g., \"122002\".
   * @member {String} _zipcode
   */
  exports.prototype['_zipcode'] = undefined;
  /**
   * Is user chosen this address as office address.
   * @member {Boolean} _isOfficeAddress
   */
  exports.prototype['_isOfficeAddress'] = undefined;
  /**
   * Is user chosen this address as home address.
   * @member {Boolean} _isHomeAddress
   */
  exports.prototype['_isHomeAddress'] = undefined;



  return exports;
}));


