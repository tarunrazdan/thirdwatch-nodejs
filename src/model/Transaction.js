/**
 * Thirdwatch API
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.   # Introduction Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  # Score API The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail    ```   https://api.thirdwatch.ai/v1/get/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.  ## Response score API  ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },        {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ```       
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BillingAddress', 'model/CustomInfo', 'model/PaymentMethod', 'model/ShippingAddress'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BillingAddress'), require('./CustomInfo'), require('./PaymentMethod'), require('./ShippingAddress'));
  } else {
    // Browser globals (root is window)
    if (!root.ThirdwatchApi) {
      root.ThirdwatchApi = {};
    }
    root.ThirdwatchApi.Transaction = factory(root.ThirdwatchApi.ApiClient, root.ThirdwatchApi.BillingAddress, root.ThirdwatchApi.CustomInfo, root.ThirdwatchApi.PaymentMethod, root.ThirdwatchApi.ShippingAddress);
  }
}(this, function(ApiClient, BillingAddress, CustomInfo, PaymentMethod, ShippingAddress) {
  'use strict';




  /**
   * The Transaction model module.
   * @module model/Transaction
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Transaction</code>.
   * @alias module:model/Transaction
   * @class
   */
  var exports = function() {
    var _this = this;

















  };

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transaction} obj Optional instance to populate.
   * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_userId')) {
        obj['_userId'] = ApiClient.convertToType(data['_userId'], 'String');
      }
      if (data.hasOwnProperty('_sessionId')) {
        obj['_sessionId'] = ApiClient.convertToType(data['_sessionId'], 'String');
      }
      if (data.hasOwnProperty('_orderId')) {
        obj['_orderId'] = ApiClient.convertToType(data['_orderId'], 'String');
      }
      if (data.hasOwnProperty('_transactionId')) {
        obj['_transactionId'] = ApiClient.convertToType(data['_transactionId'], 'String');
      }
      if (data.hasOwnProperty('_deviceIp')) {
        obj['_deviceIp'] = ApiClient.convertToType(data['_deviceIp'], 'String');
      }
      if (data.hasOwnProperty('_originTimestamp')) {
        obj['_originTimestamp'] = ApiClient.convertToType(data['_originTimestamp'], 'String');
      }
      if (data.hasOwnProperty('_userEmail')) {
        obj['_userEmail'] = ApiClient.convertToType(data['_userEmail'], 'String');
      }
      if (data.hasOwnProperty('_amount')) {
        obj['_amount'] = ApiClient.convertToType(data['_amount'], 'String');
      }
      if (data.hasOwnProperty('_currencyCode')) {
        obj['_currencyCode'] = ApiClient.convertToType(data['_currencyCode'], 'String');
      }
      if (data.hasOwnProperty('_transactionType')) {
        obj['_transactionType'] = ApiClient.convertToType(data['_transactionType'], 'String');
      }
      if (data.hasOwnProperty('_transactionStatus')) {
        obj['_transactionStatus'] = ApiClient.convertToType(data['_transactionStatus'], 'String');
      }
      if (data.hasOwnProperty('_isFirstTimeBuyer')) {
        obj['_isFirstTimeBuyer'] = ApiClient.convertToType(data['_isFirstTimeBuyer'], 'Boolean');
      }
      if (data.hasOwnProperty('_billingAddress')) {
        obj['_billingAddress'] = BillingAddress.constructFromObject(data['_billingAddress']);
      }
      if (data.hasOwnProperty('_shippingAddress')) {
        obj['_shippingAddress'] = ShippingAddress.constructFromObject(data['_shippingAddress']);
      }
      if (data.hasOwnProperty('_paymentMethod')) {
        obj['_paymentMethod'] = PaymentMethod.constructFromObject(data['_paymentMethod']);
      }
      if (data.hasOwnProperty('_customInfo')) {
        obj['_customInfo'] = CustomInfo.constructFromObject(data['_customInfo']);
      }
    }
    return obj;
  }

  /**
   * The user's account ID according to your systems. Note that user IDs are case sensitive.
   * @member {String} _userId
   */
  exports.prototype['_userId'] = undefined;
  /**
   * The user's current session ID, used to tie a user's action before and after login or account creation. Required if no user_id values is provided.
   * @member {String} _sessionId
   */
  exports.prototype['_sessionId'] = undefined;
  /**
   * The ID for tracking this order in your system.
   * @member {String} _orderId
   */
  exports.prototype['_orderId'] = undefined;
  /**
   * The ID for identifying this transaction. Important for tracking transactions, and linking different parts of the same transaction together, e.g., linking a refund to its original transaction.
   * @member {String} _transactionId
   */
  exports.prototype['_transactionId'] = undefined;
  /**
   * IP address of the request made by the user. Recommended for historical backfills and customers with mobile apps.
   * @member {String} _deviceIp
   */
  exports.prototype['_deviceIp'] = undefined;
  /**
   * Represents the time the event occured in your system. Send as a UNIX timestamp in milliseconds in string.
   * @member {String} _originTimestamp
   */
  exports.prototype['_originTimestamp'] = undefined;
  /**
   * Email of the user creating this order. Note - If the user's email is also their account ID in your system, set both the userId and userEmail fields to their email address.
   * @member {String} _userEmail
   */
  exports.prototype['_userEmail'] = undefined;
  /**
   * The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"
   * @member {String} _amount
   */
  exports.prototype['_amount'] = undefined;
  /**
   * The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.
   * @member {String} _currencyCode
   */
  exports.prototype['_currencyCode'] = undefined;
  /**
   * The type of transaction being recorded. e.g. _sale, _authorize, _capture, _void, _refund, _deposit, _withdrawal, _transfer
   * @member {String} _transactionType
   */
  exports.prototype['_transactionType'] = undefined;
  /**
   * Use _transactionStatus to indicate the status of the transaction. The value can be \"_success\" (default value), \"_failure\" or \"_pending\". For instance, If the transaction was rejected by the payment gateway, set the value to \"_failure\".
   * @member {String} _transactionStatus
   */
  exports.prototype['_transactionStatus'] = undefined;
  /**
   * Is user first time buyer.
   * @member {Boolean} _isFirstTimeBuyer
   */
  exports.prototype['_isFirstTimeBuyer'] = undefined;
  /**
   * @member {module:model/BillingAddress} _billingAddress
   */
  exports.prototype['_billingAddress'] = undefined;
  /**
   * @member {module:model/ShippingAddress} _shippingAddress
   */
  exports.prototype['_shippingAddress'] = undefined;
  /**
   * @member {module:model/PaymentMethod} _paymentMethod
   */
  exports.prototype['_paymentMethod'] = undefined;
  /**
   * @member {module:model/CustomInfo} _customInfo
   */
  exports.prototype['_customInfo'] = undefined;



  return exports;
}));


